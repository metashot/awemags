params {
    /* Input and output options */
    genomes = "data/*.fa"                    // input genomes (FASTA format)
    outdir = "./results"                     // output directory
    
    /* MMseq2 taxonomy classification and */ 
    /* MetaEuk gene prediction */
    skip_taxonomy = false                    // skip taxonomy classification using MMseq2
    skip_genepred = false                    // skip gene prediction using MetaEuk
    mmseqs_db = "none"                       // MMseqs2 database path. 'none': download from Internet
                                             // see the mmseqs_db_name parameter.
    mmseqs_db_name = "UniProtKB/Swiss-Prot"  // used if if mmseqs_db_path = 'none'. The available
                                             // databases are listed at 
                                             // https://github.com/soedinglab/mmseqs2/wiki#downloading-databases.
   
    /* eggNOG options */
    skip_eggnog = false                      // skip eggNOG
    eggnog_db = "none"                       // eggNOG v5.0 db dir. 'none': download from Internet
    eggnog_db_mem = false                    // store the eggNOG sqlite DB into memory (~44GB memory
                                             // required). This increase the annotation speed.

    /* KofamScan options */
    run_kofamscan = false                    // run KofamScan
    kofamscan_db = "none"                    // KofamScan db dir. 'none': download from Internet
    
    /* Limits */
    max_cpus = 8
    max_memory = 240.GB
    max_time = 120.h
}    


/* Docker options */
docker.enabled = true
docker.runOptions = '-u \$(id -u):\$(id -g)'


/* Import process configuration file*/
includeConfig 'process.config'


/* Manifest */
manifest {
    homePage = 'metashot.github.io'
    description = ''
    mainScript = 'main.nf'
    version = '1.0.0'
}


/* Functions */
def check_max(obj, max) {
    // see https://github.com/nextflow-io/nextflow/issues/640
    if( obj instanceof nextflow.util.MemoryUnit ) {
        try {
            def max_type = max as nextflow.util.MemoryUnit
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max memory '${max}', using default value: $obj"
            return obj
        }   
    }
    if( obj instanceof nextflow.util.Duration ) {
        try {
            def max_type = max as nextflow.util.Duration
            return obj.compareTo(max_type) == 1 ? max_type : obj
        }   
        catch( all ) {
            println "ERROR: invalid max time '${max}', using default value $obj"
            return obj
        }         
    }
    if( obj instanceof Integer ) {
        try {
            return Math.min(obj, max as int)
        }   
        catch( all ) {
            println "ERROR: invalid max cpus '${max}', using default value $obj"
            return obj
        }         
    }    
}
